import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Solution {

    public static void main(String[] args) {

        FastScanner scan = new FastScanner(System.in);

        int n = scan.nextInt();
        int d = scan.nextInt();

        Friend[] friendsList = new Friend[n];

        for (int i = 0; i < n; i++) {
            friendsList[i] = new Friend(scan.nextInt(), scan.nextInt());
        }

        Arrays.sort(friendsList);

        long maxF = 0;


        long ans = 0, max = 0;

        for (int l = 0, r = 0; r < n; ) {
            if (Math.abs(friendsList[l].money - friendsList[r].money) < d) {
                ans += friendsList[r].friendship;
                r++;
            } else {
                max = Long.max(ans, max);
                ans -= friendsList[l].friendship;
                l++;
            }

            maxF = Long.max(ans, max);

        }

        System.out.println(maxF);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static class FastScanner {
        private BufferedReader br;
        private StringTokenizer st;

        public FastScanner(InputStream stream) {
            br = new BufferedReader(new InputStreamReader(stream));
        }

        public String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public long[] nextLongArray(int n) {
            long[] tab = new long[n];
            for (int i = 0; i < tab.length; i++) {
                tab[i] = nextLong();
            }
            return tab;
        }
    }
}

class Friend implements Comparable<Friend> {
    int money;
    int friendship;

    public Friend(int m, int f) {
        money = m;
        friendship = f;
    }

    @Override
    public int compareTo(Friend o) {

        return this.money - o.money;
    }
}
