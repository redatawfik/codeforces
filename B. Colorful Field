import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.Vector;

public class Solution {


    public static void main(String[] args) {

        FastScanner scan = new FastScanner(System.in);

        int n = scan.nextInt();
        int m = scan.nextInt();
        int k = scan.nextInt();
        int t = scan.nextInt();

        String[] arr = {"Grapes", "Carrots", "Kiwis"};
        int[] xArr = new int[k];
        int[] yArr = new int[k];

        for (int i = 0; i < k; i++) {
            xArr[i] = scan.nextInt();
            yArr[i] = scan.nextInt();
        }


        while (t > 0) {

            int x = scan.nextInt();
            int y = scan.nextInt();

            int count = 0;

            innerLoop:
            for (int i = 0; i < k; i++) {

                if (x > xArr[i]) count++;
                else if (x == xArr[i]) {
                    if (y > yArr[i]) count++;
                    else if (y == yArr[i]) {
                        count = -100;
                        break innerLoop;
                    }
                }
            }

            if (count < 0) System.out.println("Waste");
            else {

                int d = ((x - 1) * m) + y - count;
                System.out.println(arr[d % 3]);

            }

            t--;
        }

    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static class FastScanner {
        private BufferedReader br;
        private StringTokenizer st;

        public FastScanner(InputStream stream) {
            br = new BufferedReader(new InputStreamReader(stream));
        }

        public String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public long[] nextLongArray(int n) {
            long[] tab = new long[n];
            for (int i = 0; i < tab.length; i++) {
                tab[i] = nextLong();
            }
            return tab;
        }
    }
}
