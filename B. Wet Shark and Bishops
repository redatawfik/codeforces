import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Solution {

    public static void main(String[] args) {

        FastScanner scan = new FastScanner(System.in);

        String a = scan.next();
        String b = scan.next();

        int[] arr0 = new int[b.length() + 1];
        int[] arr1 = new int[b.length() + 1];

        for (int i = 1; i <= b.length(); i++) {

            if (b.charAt(i - 1) == '0') {
                arr0[i] += arr0[i - 1] + 1;
                arr1[i] += arr1[i - 1];
            } else {
                arr0[i] += arr0[i - 1];
                arr1[i] += arr1[i - 1] + 1;
            }
        }

        long sum = 0;
        for (int i = 0; i < a.length(); i++) {
            if (a.charAt(i) == '0') {
                sum += arr1[b.length() - a.length() + i + 1] - arr1[i];
            } else {
                sum += arr0[b.length() - a.length() + i + 1] - arr0[i];
            }
        }

        System.out.println(sum);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static class FastScanner {
        private BufferedReader br;
        private StringTokenizer st;

        public FastScanner(InputStream stream) {
            br = new BufferedReader(new InputStreamReader(stream));
        }

        public String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public long[] nextLongArray(int n) {
            long[] tab = new long[n];
            for (int i = 0; i < tab.length; i++) {
                tab[i] = nextLong();
            }
            return tab;
        }
    }
}
