import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Solution {


    static int n;
    static int[] arr;
    static int[][] mem;


    public static void main(String[] args) {

        FastScanner scan = new FastScanner(System.in);

        n = scan.nextInt();

        arr = new int[n];
        mem = new int[n][4];


        for (int i = 0; i < n; i++) {
            arr[i] = scan.nextInt();

            for (int j = 0; j < 4; j++) {
                mem[i][j] = -1;
            }
        }

        int res = maxRest(0, 3);
        System.out.println(res);

    }

    static int OO = Integer.MAX_VALUE;

    static int maxRest(int i, int last) {
        if (i == n) {
            return 0;
        }

        if (mem[i][last] != -1) {
            return mem[i][last];
        }

        int ret = OO;

        if (arr[i] == 1) {
            if (last != 1) {
                ret = Math.min(ret, maxRest(i + 1, 1));
            }
        }
        if (arr[i] == 2) {
            if (last != 2) {
                ret = Math.min(ret, maxRest(i + 1, 2));
            }
        }
        if (arr[i] == 3) {
            if (last != 1) {
                ret = Math.min(ret, maxRest(i + 1, 1));
            }

            if (last != 2) {
                ret = Math.min(ret, maxRest(i + 1, 2));
            }
        }

        ret = Math.min(ret, maxRest(i + 1, 0) + 1);

        return mem[i][last] = ret;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static class FastScanner {
        private BufferedReader br;
        private StringTokenizer st;

        public FastScanner(InputStream stream) {
            br = new BufferedReader(new InputStreamReader(stream));
        }

        public String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public long[] nextLongArray(int n) {
            long[] tab = new long[n];
            for (int i = 0; i < tab.length; i++) {
                tab[i] = nextLong();
            }
            return tab;
        }
    }
}


