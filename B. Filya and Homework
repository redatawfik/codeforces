
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.StringTokenizer;


public class Solution {

    public static void main(String[] args) {
        FastScanner scan = new FastScanner(System.in);

        int n = scan.nextInt();
        if (n <= 2) {
            System.out.println("YES");
            return;
        }
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scan.nextInt();
        }
        Arrays.sort(arr);

        int last = arr[0];
        int count = 1;
        ArrayList<Integer> dif = new ArrayList<>();
        dif.add(last);

        for (int i = 1; i < arr.length; i++) {
            if (arr[i] != last) {
                count++;
                last = arr[i];
                dif.add(last);
            }

            if (count > 3) {
                System.out.println("NO");
                return;
            }
        }

        if (dif.size() == 1 || dif.size() == 2) {
            System.out.println("YES");
            return;
        } else if (dif.get(1) - dif.get(0) == dif.get(2) - dif.get(1)) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }

    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static class FastScanner {
        private BufferedReader br;
        private StringTokenizer st;

        public FastScanner(InputStream stream) {
            br = new BufferedReader(new InputStreamReader(stream));
        }

        public String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public long[] nextLongArray(int n) {
            long[] tab = new long[n];
            for (int i = 0; i < tab.length; i++) {
                tab[i] = nextLong();
            }
            return tab;
        }
    }
}
